//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightCrm.PatientsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PatientsService.IPatientsService")]
    public interface IPatientsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/AddNewPatient", ReplyAction="http://tempuri.org/IPatientsService/AddNewPatientResponse")]
        void AddNewPatient(CrmModels.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/AddNewPatient", ReplyAction="http://tempuri.org/IPatientsService/AddNewPatientResponse")]
        System.Threading.Tasks.Task AddNewPatientAsync(CrmModels.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/DeletePatient", ReplyAction="http://tempuri.org/IPatientsService/DeletePatientResponse")]
        void DeletePatient(CrmModels.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/DeletePatient", ReplyAction="http://tempuri.org/IPatientsService/DeletePatientResponse")]
        System.Threading.Tasks.Task DeletePatientAsync(CrmModels.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/UpdatePatient", ReplyAction="http://tempuri.org/IPatientsService/UpdatePatientResponse")]
        void UpdatePatient(CrmModels.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/UpdatePatient", ReplyAction="http://tempuri.org/IPatientsService/UpdatePatientResponse")]
        System.Threading.Tasks.Task UpdatePatientAsync(CrmModels.PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/GetPatients", ReplyAction="http://tempuri.org/IPatientsService/GetPatientsResponse")]
        CrmModels.PatientDto[] GetPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientsService/GetPatients", ReplyAction="http://tempuri.org/IPatientsService/GetPatientsResponse")]
        System.Threading.Tasks.Task<CrmModels.PatientDto[]> GetPatientsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientsServiceChannel : LightCrm.PatientsService.IPatientsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientsServiceClient : System.ServiceModel.ClientBase<LightCrm.PatientsService.IPatientsService>, LightCrm.PatientsService.IPatientsService {
        
        public PatientsServiceClient() {
        }
        
        public PatientsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddNewPatient(CrmModels.PatientDto patient) {
            base.Channel.AddNewPatient(patient);
        }
        
        public System.Threading.Tasks.Task AddNewPatientAsync(CrmModels.PatientDto patient) {
            return base.Channel.AddNewPatientAsync(patient);
        }
        
        public void DeletePatient(CrmModels.PatientDto patient) {
            base.Channel.DeletePatient(patient);
        }
        
        public System.Threading.Tasks.Task DeletePatientAsync(CrmModels.PatientDto patient) {
            return base.Channel.DeletePatientAsync(patient);
        }
        
        public void UpdatePatient(CrmModels.PatientDto patient) {
            base.Channel.UpdatePatient(patient);
        }
        
        public System.Threading.Tasks.Task UpdatePatientAsync(CrmModels.PatientDto patient) {
            return base.Channel.UpdatePatientAsync(patient);
        }
        
        public CrmModels.PatientDto[] GetPatients() {
            return base.Channel.GetPatients();
        }
        
        public System.Threading.Tasks.Task<CrmModels.PatientDto[]> GetPatientsAsync() {
            return base.Channel.GetPatientsAsync();
        }
    }
}
